@use 'mixins/responsive';

$unit2: 2px;
$unit4: 4px;

/* Grid */
$gridCols: ();
.grid {
  --cols: 1;
  display: grid;
  grid-template-columns: repeat(var(--cols), 1fr);

  &_cols {
    @for $i from 1 through 4 {
      &_#{$i} {
        --cols: #{$i};
      }
    }
  }
  @include responsive.sp {
    &_mb {
      --cols: 1;
      display: grid;
      grid-template-columns: repeat(var(--cols), 1fr);

      &_cols {
        @for $i from 1 through 4 {
          &_#{$i} {
            --cols: #{$i};
          }
        }
      }
    }
  }
}

/* Flex */
$flexAttr: (
  'col': (
    flex-direction: column,
  ),
  'row': (
    flex-direction: row,
  ),
  'center': (
    justify-content: center,
  ),
  'between': (
    justify-content: space-between,
  ),
  'middle': (
    align-items: center,
  ),
  'bottom': (
    align-items: flex-end,
  ),
  'wrap': (
    flex-wrap: wrap,
  ),
  'nowrap': (
    flex-wrap: nowrap,
  ),
  '1': (
    flex: 1,
  ),
);
.flex {
  display: flex;

  @each $name, $attr in $flexAttr {
    &_#{$name} {
      @each $prop, $value in $attr {
        #{$prop}: #{$value};
      }
    }
  }

  @include responsive.sp {
    &_mb {
      display: flex;

      @each $name, $attr in $flexAttr {
        &_#{$name} {
          @each $prop, $value in $attr {
            #{$prop}: #{$value};
          }
        }
      }
    }
  }
}

/* Gap */
$gap: (
  '0': gap,
  'col': column-gap,
  'row': row-gap,
);
.gap {
  @each $type, $name in $gap {
    @for $i from 0 through 30 {
      @if $type == '0' {
        &_#{$i} {
          #{$name}: $unit4 * $i;
        }
      } @else {
        &_#{$type}_#{$i} {
          #{$name}: $unit4 * $i;
        }
      }
    }
  }

  @include responsive.sp {
    &_mb {
      @each $type, $name in $gap {
        @for $i from 0 through 20 {
          @if $type == '0' {
            &_#{$i} {
              #{$name}: $unit4 * $i;
            }
          } @else {
            &_#{$type}_#{$i} {
              #{$name}: $unit4 * $i;
            }
          }
        }
      }
    }
  }
}

/* Width */
$width: (
  'full': (
    width: 100%,
  ),
);
.w {
  @each $name, $attr in $width {
    &_#{$name} {
      @each $prop, $value in $attr {
        #{$prop}: #{$value};
      }
    }
  }
}

/* Padding */
$paddingSizes: (
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  20,
  25,
  30,
  40,
  50
);
$paddingTypes: (
  '0': padding,
  't': padding-top,
  'r': padding-right,
  'b': padding-bottom,
  'l': padding-left,
);
.p {
  @each $type, $prop in $paddingTypes {
    @each $size in $paddingSizes {
      @if $type == '0' {
        &_#{$size} {
          #{$prop}: $unit2 * $size;
        }
      } @else {
        &#{$type}_#{$size} {
          #{$prop}: $unit2 * $size;
        }
      }
    }
  }

  @include responsive.sp {
    @each $type, $prop in $paddingTypes {
      @each $size in $paddingSizes {
        @if $type == '0' {
          &_mb_#{$size} {
            #{$prop}: $unit2 * $size;
          }
        } @else {
          &#{$type}_mb_#{$size} {
            #{$prop}: $unit2 * $size;
          }
        }
      }
    }
  }
}

/* Margin */
$marginSizes: (
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  20,
  25,
  30,
  40,
  50
);
$marginTypes: (
  '0': margin,
  't': margin-top,
  'r': margin-right,
  'b': margin-bottom,
  'l': margin-left,
);
.m {
  @each $type, $prop in $marginTypes {
    @each $size in $marginSizes {
      @if $type == '0' {
        &_#{$size} {
          #{$prop}: $unit2 * $size;
        }
      } @else {
        &#{$type}_#{$size} {
          #{$prop}: $unit2 * $size;
        }
      }
    }
  }

  @include responsive.sp {
    @each $type, $prop in $marginTypes {
      @each $size in $marginSizes {
        @if $type == '0' {
          &_mb_#{$size} {
            #{$prop}: $unit2 * $size;
          }
        } @else {
          &#{$type}_mb_#{$size} {
            #{$prop}: $unit2 * $size;
          }
        }
      }
    }
  }
}

/* Radius */
$rounded: (
  '3': 3px,
  '5': 5px,
  '10': 10px,
  'circle': 50%,
  'pill': 500px,
);
.rounded {
  @each $name, $value in $rounded {
    &_#{$name} {
      border-radius: #{$value};
    }
  }
}

/* Text */
$fontSizes: (4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 25);
$text: (
  'center': (
    text-align: center,
  ),
  'white': (
    color: white,
  ),
  'black': (
    color: black,
  ),
  'gray': (
    color: #898989,
  ),
  'bold': (
    font-weight: bold,
  ),
);
.text {
  @each $size in $fontSizes {
    &_#{$size} {
      font-size: $unit2 * $size;
    }
  }

  @each $type, $props in $text {
    @each $attr, $value in $props {
      &_#{$type} {
        #{$attr}: #{$value};
      }
    }
  }

  @include responsive.sp {
    &_mb {
      @each $size in $fontSizes {
        &_#{$size} {
          font-size: $unit2 * $size;
        }
      }

      @each $type, $props in $text {
        @each $attr, $value in $props {
          &_#{$type} {
            #{$attr}: #{$value};
          }
        }
      }
    }
  }
}

.dShadow-a {
  filter: drop-shadow(-1px 6px 4px #a6a6a6);
}

.box_a {
  border-radius: 12px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
  padding: 26px;
}
.w50p {
  width: 50%;
  @include responsive.sp {
    width: 100%;
  }
}

.company-info_item {
  border-bottom: 1px solid #ccc;
  display: flex;
  padding: 16px 0;
  @include responsive.sp {
    flex-direction: column;
  }
}

.company-info_item:first-child {
  border-top: 1px solid #ccc;
}

.board-member-item {
  align-items: stretch;
  border: 1px solid #e0e0e0;
  border-radius: 9px;
  overflow: hidden;
  @include responsive.sp {
    flex-direction: column-reverse;
  }
}

.board-intro {
  background-color: #212229;
  flex: 0 0 65%;
  padding: 40px;
  @include responsive.sp {
    flex: 0 0 100%;
  }
}

.board-img {
  // Chiếm full height của div cha
  height: 100%;
  object-fit: cover;
  overflow: hidden;

  img {
    display: block; // Bỏ khoảng trắng dưới ảnh
    height: 100%;
    object-fit: cover; // Giữ tỉ lệ, crop nếu cần
    object-position: center; // Canh giữa
    width: 100%;
  }
}

.bg_333 {
  background-color: #333;
}

.btn_black {
  background-color: #333;
  border-radius: 20px;
  color: #fff;
  display: inline-block; /* đảm bảo có kích thước */
  font-weight: bold;
  padding: 30px 75px 30px 25px;
  position: relative;
  text-decoration: none;
}

.btn_black.bottom_arrow::after {
  background-image: url(../../../images/common/arrow-bottom.png);
  background-position: center;
  background-repeat: no-repeat;
  background-size: cover;
  content: '';
  height: 40px;
  position: absolute;
  right: 20px;
  top: 50%;
  transform: translateY(-50%);
  width: 40px;
}

.consulting-1 a {
  flex: 1;
}

.steps {
  font-family: sans-serif;
  margin: 0 auto;
  // max-width: 1000px;
  width: 100%;
}

.step {
  align-items: center;
  background: #fff;
  border: 2px solid transparent;
  border-radius: 10px;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
  display: flex;
  margin-bottom: 20px;
  padding: 20px;
  transition: border 0.3s;
}

.step-number {
  align-items: center;
  border: 2px solid #000;
  border-radius: 50%;
  display: flex;
  font-size: 20px;
  font-weight: bold;
  height: 50px;
  justify-content: center;
  margin-right: 20px;
  min-width: 50px;
}

.step-content .title {
  font-size: 18px;
  font-weight: bold;
  margin: 0 0 5px;
}

.step-content .description {
  color: #333;
  font-size: 15px;
  margin: 0;
}

.plan-box {
  border-radius: 12px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
  display: flex;
  font-family: sans-serif;
  margin: 20px auto;
  overflow: hidden;
  @include responsive.sp {
    flex-direction: column;
  }
}

.plan-title {
  align-items: center;
  background-color: #1c1c22;
  color: #fff;
  display: flex;
  flex: 1;
  font-weight: bold;
  min-width: 200px;
  padding: 30px 40px;
}

.plan-price {
  align-items: center;
  background-color: #fff;
  color: #000;
  display: flex;
  flex: 1;
  font-size: 16px;
  font-weight: bold;
  padding: 30px 40px;
}

.button-group {
  display: flex;
  flex-wrap: wrap;
  gap: 30px;
  justify-content: space-between;
}

.button-item {
  align-items: center;
  background-color: #333;
  border-radius: 10px;
  color: #fff;
  display: inline-block;
  display: flex;
  flex: 1 1 calc((100% - 90px) / 4);
  height: 84px;
  min-width: 220px;
  padding-left: 50px;
  position: relative;
  // padding-left: 30px 75px 30px 50px;
  text-wrap: nowrap;
}
.btn-arrow-below::after {
  background-image: url(../../../images/common/arrow-bottom.png);
  background-position: center;
  background-repeat: no-repeat;
  background-size: cover;
  color: #fff;
  content: '';
  height: 40px;
  position: absolute;
  right: 20px;
  top: 50%;
  transform: translateY(-50%);
  width: 40px;
}
